import os
import logging
from flask import Flask, request
from openai import OpenAI
import requests

# ---------------------------------------------------------
# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ---------------------------------------------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("grs-tg-bot")

# ---------------------------------------------------------
# üîë –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ---------------------------------------------------------
def need(name: str) -> str:
    """–ë–µ—Ä—ë—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    value = os.getenv(name)
    if not value:
        raise RuntimeError(
            f"–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name}. "
            f"–õ–æ–∫–∞–ª—å–Ω–æ ‚Äî —É–∫–∞–∂–∏ –µ—ë –≤ .env, –Ω–∞ Railway ‚Äî –≤ Variables."
        )
    return value

# ---------------------------------------------------------
# üîë –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–π
# ---------------------------------------------------------
TELEGRAM_TOKEN = need("TELEGRAM_TOKEN")
OPENAI_API_KEY = need("OPENAI_API_KEY")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")

# ---------------------------------------------------------
# üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
# ---------------------------------------------------------
client = OpenAI(api_key=OPENAI_API_KEY)
app = Flask(__name__)

# ---------------------------------------------------------
# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
# ---------------------------------------------------------
def send_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}

    r = requests.post(url, json=payload)
    if not r.ok:
        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {r.text}")
    return r.json()

# ---------------------------------------------------------
# üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
# ---------------------------------------------------------
@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json(force=True)
    if not update:
        return "OK"

    message = update.get("message")
    if not message:
        return "OK"

    chat_id = message["chat"]["id"]
    chat_type = message["chat"]["type"]

    # –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if chat_type != "private":
        log.info(f"Ignored update from chat_type={chat_type}, id={chat_id}")
        return "OK"

    user_text = message.get("text", "")
    if not user_text:
        return "OK"

    log.info(f"User {chat_id} wrote: {user_text}")

    try:
        response = client.chat.completions.create(
            model="gpt-5-mini",
            messages=[{"role": "user", "content": user_text}],
            max_completion_tokens=500
        )

        # üîé –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç OpenAI (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        log.info(f"OpenAI raw response: {response}")

        reply_text = None
        if response.choices:
            choice = response.choices[0]

            # –≤–∞—Ä–∏–∞–Ω—Ç 1: message –∫–∞–∫ dict
            if hasattr(choice, "message") and choice.message:
                if isinstance(choice.message, dict):
                    reply_text = choice.message.get("content")
                else:
                    reply_text = getattr(choice.message, "content", None)

            # –≤–∞—Ä–∏–∞–Ω—Ç 2: text –Ω–∞–ø—Ä—è–º—É—é
            if not reply_text and hasattr(choice, "text"):
                reply_text = choice.text

        if not reply_text:
            log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI: {response}")
            reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."

    send_message(chat_id, reply_text)
    return "OK", 200

# ---------------------------------------------------------
# üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
# ---------------------------------------------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)

import os
import logging
from flask import Flask, request
from dotenv import load_dotenv
from openai import OpenAI   # –Ω–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env –ª–æ–∫–∞–ª—å–Ω–æ, Variables –Ω–∞ Railway)
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("grs-tg-bot")

def need(name: str) -> str:
    """–î–æ—Å—Ç–∞—ë—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    val = os.getenv(name)
    if not val:
        log.error(f"ENV MISSING: {name}. –ü—Ä–æ–≤–µ—Ä—å Variables —É —Å–µ—Ä–≤–∏—Å–∞ web –∏ —Å–¥–µ–ª–∞–π Redeploy.")
        raise RuntimeError(
            f"–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name}. "
            f"–õ–æ–∫–∞–ª—å–Ω–æ ‚Äî –ø–æ–ª–æ–∂–∏ –≤ .env, –Ω–∞ Railway ‚Äî –¥–æ–±–∞–≤—å –≤ Variables."
        )
    return val

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = need("TELEGRAM_TOKEN")
OPENAI_API_KEY = need("OPENAI_API_KEY")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI SDK (–Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç)
client = OpenAI(api_key=OPENAI_API_KEY)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    resp = requests.post(url, json=payload)
    if resp.status_code != 200:
        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {resp.text}")

# –ö–æ—Ä–µ–Ω—å ‚Äî –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
@app.route("/", methods=["GET"])
def root():
    return "OK", 200

# Webhook
@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if WEBHOOK_SECRET and secret != WEBHOOK_SECRET:
        log.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞")
        return "Forbidden", 403

    update = request.get_json(force=True)
    message = update.get("message")
    if not message:
        return "OK"

    chat_id = message["chat"]["id"]
    chat_type = message["chat"]["type"]  # private, group, channel, supergroup

    # üîë –§–∏–ª—å—Ç—Ä: –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if chat_type != "private":
        log.info(f"Ignored update from chat_type={chat_type}, id={chat_id}")
        return "OK"

    user_text = message.get("text", "")
    if not user_text:
        return "OK"

    log.info(f"User {chat_id} wrote: {user_text}")

   try:
    response = client.chat.completions.create(
        model="gpt-5-mini",
        messages=[{"role": "user", "content": user_text}],
        max_completion_tokens=1000
    )

    # –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if response.choices and response.choices[0].message:
        reply_text = response.choices[0].message.content or "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."
    else:
        reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."

except Exception as e:
    log.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
    reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."

    send_message(chat_id, reply_text)
    return "OK", 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)

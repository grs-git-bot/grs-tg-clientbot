import os
import logging
import json
import requests
from flask import Flask, request
from openai import OpenAI

# ----------------------------------------
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ----------------------------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("grs-tg-bot")

# ----------------------------------------
# üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ----------------------------------------
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")
PORT = int(os.getenv("PORT", 8080))

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
if not os.getenv("OPENAI_API_KEY"):
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY")
if not TAVILY_API_KEY:
    log.warning("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω TAVILY_API_KEY ‚Äî –ø–æ–∏—Å–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

# ----------------------------------------
# üîπ Flask
# ----------------------------------------
app = Flask(__name__)

# ----------------------------------------
# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
# ----------------------------------------
def send_message(chat_id: int, text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    r = requests.post(url, json=payload)
    if not r.ok:
        log.error(f"–û—à–∏–±–∫–∞ Telegram API: {r.text}")

# ----------------------------------------
# üîé –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Tavily
# ----------------------------------------
def web_search(query: str) -> str:
    url = "https://api.tavily.com/search"
    headers = {"Authorization": f"Bearer {TAVILY_API_KEY}"}
    payload = {"query": query, "num_results": 3}
    resp = requests.post(url, headers=headers, json=payload)
    if resp.status_code != 200:
        log.error(f"–û—à–∏–±–∫–∞ Tavily API: {resp.text}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"
    data = resp.json()
    results = [item["content"] for item in data.get("results", [])]
    return "\n".join(results) if results else "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

# ----------------------------------------
# üì• Webhook
# ----------------------------------------
@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = request.json
    message = update.get("message")
    if not message:
        return "ok"

    chat_id = message["chat"]["id"]
    chat_type = message["chat"]["type"]
    user_text = message.get("text", "")

    if chat_type != "private":
        return "ok"
    if not user_text.strip():
        return "ok"

    log.info(f"User {chat_id} wrote: {user_text}")

    system_prompt = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Global Relocation Solutions (GRS). "
        "–¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –í–ù–ñ/–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞. "
        "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ —é—Ä–∏—Å—Ç-–ø—Ä–∞–∫—Ç–∏–∫. "
        "–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫."
    )

    try:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_text},
            ],
            tools=[
                {
                    "type": "function",
                    "function": {
                        "name": "web_search",
                        "description": "–ü–æ–∏—Å–∫ —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "query": {"type": "string"}
                            },
                            "required": ["query"],
                        },
                    }
                }
            ],
            tool_choice="auto",
            max_completion_tokens=800,
        )

        choice = response.choices[0]

        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞ –≤—ã–∑–≤–∞—Ç—å web_search
        if choice.message.tool_calls:
            for tool_call in choice.message.tool_calls:
                if tool_call.function.name == "web_search":
                    args = json.loads(tool_call.function.arguments)
                    query = args.get("query")
                    search_result = web_search(query)

                    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –º–æ–¥–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                    response = client.chat.completions.create(
                        model="gpt-4.1",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": user_text},
                            choice.message,
                            {
                                "role": "tool",
                                "tool_call_id": tool_call.id,
                                "content": search_result,
                            },
                        ],
                        max_completion_tokens=1000,
                    )

        reply_text = response.choices[0].message.content.strip()
        if not reply_text:
            reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç–∞."

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

    send_message(chat_id, reply_text)
    return "ok"

# ----------------------------------------
# üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
# ----------------------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)

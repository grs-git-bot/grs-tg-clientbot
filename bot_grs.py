import os
import logging
from flask import Flask, request
from openai import OpenAI
import requests

# ---------------------------------------------------------
# üîë –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ---------------------------------------------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("grs-tg-bot")

# ---------------------------------------------------------
# üîë –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ---------------------------------------------------------
def need(name: str) -> str:
    value = os.getenv(name)
    if not value:
        raise RuntimeError(f"–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name}")
    return value

# ---------------------------------------------------------
# üîë –ö–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã
# ---------------------------------------------------------
TELEGRAM_TOKEN = need("TELEGRAM_TOKEN")
OPENAI_API_KEY = need("OPENAI_API_KEY")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")

# ---------------------------------------------------------
# üîë –ö–ª–∏–µ–Ω—Ç—ã
# ---------------------------------------------------------
client = OpenAI(api_key=OPENAI_API_KEY)
app = Flask(__name__)

# ---------------------------------------------------------
# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
# ---------------------------------------------------------
def send_message(chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ > 4096 —Å–∏–º–≤–æ–ª–æ–≤, –¥–µ–ª–∏–º –Ω–∞ —á–∞—Å—Ç–∏.
    """
    MAX_LEN = 4096
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

    # –¥–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏
    chunks = [text[i:i + MAX_LEN] for i in range(0, len(text), MAX_LEN)]

    for chunk in chunks:
        payload = {"chat_id": chat_id, "text": chunk}
        r = requests.post(url, json=payload)
        if not r.ok:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {r.text}")
        else:
            log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤")

# ---------------------------------------------------------
# üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
# ---------------------------------------------------------
@app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_json(force=True)
    if not update:
        return "OK"

    message = update.get("message")
    if not message:
        return "OK"

    chat_id = message["chat"]["id"]
    chat_type = message["chat"]["type"]

    # ‚ö†Ô∏è —Ñ–∏–ª—å—Ç—Ä ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if chat_type != "private":
        log.info(f"Ignored update from chat_type={chat_type}, id={chat_id}")
        return "OK"

    user_text = message.get("text", "")
    if not user_text:
        return "OK"

    log.info(f"User {chat_id} wrote: {user_text}")

    try:
        response = client.chat.completions.create(
            model="gpt-5-mini",
            messages=[{"role": "user", "content": user_text}],
            max_completion_tokens=2000,   # ‚úÖ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç
            temperature=0.7               # ‚úÖ –∂–∏–≤–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
        )

        log.info(f"OpenAI raw response: {response}")

        reply_text = None
        if response.choices:
            choice = response.choices[0]
            if choice.message:
                reply_text = getattr(choice.message, "content", None)

        if not reply_text or reply_text.strip() == "":
            log.error(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {response}")
            reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        reply_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π)
    send_message(chat_id, reply_text)
    return "OK", 200

# ---------------------------------------------------------
# üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
# ---------------------------------------------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))
    app.run(host="0.0.0.0", port=port)
